AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Slack Analytics Bot - SAM Template (TypeScript / Node.js)

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 120
    MemorySize: 1024
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        SLACK_BOT_TOKEN: !Ref SlackBotToken
        SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
        OPENAI_API_KEY: !Ref OpenAIKey
        OPENAI_MODEL: !Ref OpenAIModel
        REPORT_CHANNEL_ID: !Ref ReportChannelId
        OPENAI_QA_SYSTEM_PROMPT: !Ref OpenAIQASystemPrompt
        OPENAI_REPORT_SYSTEM_PROMPT: !Ref OpenAIReportSystemPrompt
        DB_HOST: !Ref DbHost
        DB_PORT: !Ref DbPort
        DB_USER: !Ref DbUser
        DB_PASSWORD: !Ref DbPassword
        DB_NAME: !Ref DbName

Parameters:
  SlackBotToken:
    Type: String
    NoEcho: true
    Description: Slack Bot User OAuth Token (starts with xoxb-)
  SlackSigningSecret:
    Type: String
    NoEcho: true
    Description: Slack App Signing Secret
  ReportChannelId:
    Type: String
    Default: ""
    Description: Slack channel ID to post scheduled reports
  DbHost:
    Type: String
    Default: ""
    Description: MySQL hostname
  DbPort:
    Type: String
    Default: "3306"
    Description: MySQL port
  DbUser:
    Type: String
    Default: ""
    Description: MySQL username
  DbPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: MySQL password
  DbName:
    Type: String
    Default: ""
    Description: MySQL database name
  OpenAIKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
  OpenAIModel:
    Type: String
    Default: gpt-5-nano
    Description: OpenAI Chat Model (e.g. gpt-5-nano)
  OpenAIQASystemPrompt:
    Type: String
    Default: |
      당신은 MySQL 전문가입니다.\n사용자가 자연어로 요청하면, 안전하고 유효한 MySQL SQL문만 작성하십시오. \n복잡한 집계, 그룹핑, 서브쿼리, CTE, 윈도우 함수 사용도 허용됩니다.\n\n[DB 스키마]\n- user_action(user_action_idx, user_action_type, ceo_idx, extra_data, ins_date)\n- ceo(ceo_idx, corp_idx)\n- tbl_corp(corp_idx, corp_name)\n\n[규칙]\n1. user_action.ceo_idx → corp_name으로 변환하여 출력 (tc.corp_name 컬럼 포함)\n2. 불필요한 컬럼 제외\n3. 가능하다면 마트별로 통합, 불가능하다면 마트 이름순으로 정렬\n4. SELECT 구문만 작성, MySQL에서 실행 가능해야 함\n5. 윈도우 함수(AVG, STDDEV 등), CTE, 서브쿼리 사용 가능\n6. 답변은 SQL문만 반환 (설명, 주석, 코드 블록 금지)\n7. 소수점 이하 한 자리까지만 표시\n\n[이벤트 그룹]\n- 핵심: print_pop, save_pamphlet, send_message (비교/비율 분석용)\n- 참고: visit, save_pop (필요 시 단순 카운트)\n\n[출력 예시]\nSELECT tc.corp_name AS mart_name,\n       COUNT(*) AS save_pamphlet_count\nFROM user_action ua\nJOIN ceo c ON ua.ceo_idx = c.ceo_idx\nJOIN tbl_corp tc ON c.corp_idx = tc.corp_idx\nWHERE ua.user_action_type = 'save_pamphlet'\nGROUP BY tc.corp_name\nORDER BY tc.corp_name;
    Description: System prompt used for mention Q&A
  OpenAIReportSystemPrompt:
    Type: String
    Default: |
      당신은 전문 데이터 분석가입니다.  \n주어진 JSON 사용자 로그 데이터를 기반으로, 사실에 근거한 체계적이고 가독성이 높은 데이터 분석 보고서를 작성하십시오.\n\n[분석 목적]\n- 활성·유입·이탈 사용자 등 코호트 분석\n- 마트(사용자) 행동 패턴과 트렌드 분석\n- 기간별(주·월·요일) 비교를 통한 패턴, 트렌드, 이상치 분석 및 시사점 확인\n\n[규칙]\n- 보고서에는 원천 JSON 데이터는 포함하지 말고, 오직 요약과 인사이트 중심으로 작성\n- 가독성을 최우선으로 할 것\n- 모든 수치는 반드시 어떤 이벤트 또는 지표를 나타내는지 명시적으로 표시\n- 보고서 내용과 관련 없는 추가 제안은 금지 (예: 추가 분석, 시각화, 코드)\n- 월간/주간/요일별 비교 및 증감률, 주요 패턴, 이상치, 핵심 시사점 등을 강조\n\n[출력 형식]\n- Slack 메시지용 blocks 형식으로 작성, 최종 결과물은 항상 JSON 배열 '[ ... ]' 형식이어야 함\n- 지표 요약은 반드시 코드블럭 '``` ```' 안에 작성할 것\n- 텍스트는 mrkdwn 형식으로 작성하여 강조, 글머리표, 번호 등을 자유롭게 활용\n- 들여쓰기는 띄어쓰기 네 칸 사용\n- '코프/코퍼레이션/기업/상점' 등은 모두 '마트'로 통일\n- 각 블록에는 section, header, context 등 Slack에서 지원하는 블록 타입을 활용\n\n[예시 구조]\n[\n  {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": \"📋 9월 7일 데이터 분석 보고서\"\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"*1. 핵심 요약*\\n ...\"\n    }\n  },\n  ...\n]
    Description: System prompt used for report generation
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues: [CRITICAL, ERROR, WARNING, INFO, DEBUG]
    Description: Log level for functions
  ScheduleExpression:
    Type: String
    Default: cron(0 23 ? * SUN *)
    Description: >-
      EventBridge schedule for weekly report. Default is 23:00 UTC Sunday
      (08:00 Monday KST).

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      TracingEnabled: true

  MentionQnAFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: handlers/answerMention.handleSlackMentionQnA
      Events:
        SlackEvents:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /slack/events
            Method: POST
      ReservedConcurrentExecutions: 1
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node20"
        Sourcemap: true
        EntryPoints:
          - src/handlers/answerMention.ts
        External:
          - aws-sdk

  GenerateReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: handlers/generateReport.generateAnalyticsReport
      Events:
        WeeklySchedule:
          Type: Schedule
          Properties:
            Schedule: !Ref ScheduleExpression
      ReservedConcurrentExecutions: 1
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node20"
        Sourcemap: true
        EntryPoints:
          - src/handlers/generateReport.ts
        External:
          - aws-sdk

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for Slack events
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/slack/events
